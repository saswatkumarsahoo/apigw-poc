{
  "swagger": "2.0",
  "info": {
    "version": "3.0",
    "title": "Customers"
  },
  "host": "9lxjryg0b1.execute-api.eu-west-1.amazonaws.com",
  "basePath": "/prd",
  "schemes": [
    "https"
  ],
  "paths": {
   
    "/customer/api-queue": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "404": {
            "description": "404 response"
          },
          "500": {
            "description": "500 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:472828582453:function:CUS_CCDP_ApiQueueGet:${stageVariables.ENVIRONMENT}/invocations",
          "responses": {
            ".*\\\"httpStatusCode\\\":400.*": {
              "statusCode": "400",
              "responseTemplates": {
                "application/json": "#set($message = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  #foreach($key in $message.data.keySet())\r\n  \"$key\": \"$message.data.get($key)\"#if($foreach.hasNext),#end\r\n  \r\n  #end\r\n}"
              }
            },
            "default": {
              "statusCode": "200",
              "responseTemplates": {
                "application/json": "$input.json('$.data')"
              }
            },
            ".*\\\"httpStatusCode\\\":500.*": {
              "statusCode": "500",
              "responseTemplates": {
                "application/json": "#set($message = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  #foreach($key in $message.data.keySet())\r\n  \"$key\": \"$message.data.get($key)\"#if($foreach.hasNext),#end\r\n  \r\n  #end\r\n}"
              }
            },
            ".*\\\"httpStatusCode\\\":404.*": {
              "statusCode": "404",
              "responseTemplates": {
                "application/json": "#set($message = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  #foreach($key in $message.data.keySet())\r\n  \"$key\": \"$message.data.get($key)\"#if($foreach.hasNext),#end\r\n  \r\n  #end\r\n}"
              }
            }
          },
          "passthroughBehavior": "when_no_templates",
          "httpMethod": "POST",
          "requestTemplates": {
            "application/json": "#set($allParams = $input.params())\r\n{\r\n#foreach($type in $allParams.keySet())\r\n  #if($type!='path' && $type!='header') \r\n    #set($params = $allParams.get($type))\r\n    #foreach($paramName in $params.keySet())\r\n    \"$paramName\" : \"$params.get($paramName)\"\r\n\t#if($foreach.hasNext),#end\r\n    #end \r\n#end\r\n#end\r\n}"
          },
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws"
        }
      }
    },
    "/customer/propositions/offers": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:472828582453:function:PURL_VALIDATE_PROMOCODE:${stageVariables.ENVIRONMENT}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_templates",
          "httpMethod": "POST",
          "requestTemplates": {
            "application/json": "#set($allParams = $input.params())\r\n{\r\n#foreach($type in $allParams.keySet())\r\n  #if($type!='path' && $type!='header') \r\n    #set($params = $allParams.get($type))\r\n    #foreach($paramName in $params.keySet())\r\n    \"$paramName\" : \"$params.get($paramName)\"\r\n\t#if($foreach.hasNext),#end\r\n    #end \r\n#end\r\n#end\r\n}\r\n"
          },
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws"
        }
      },
      "post": {
        "responses": {
          "200": {
            "description": "200 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:472828582453:function:PURL_CREATE_PROMOTION:${stageVariables.ENVIRONMENT}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws"
        }
      },
      "put": {
        "responses": {
          "200": {
            "description": "200 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:472828582453:function:PURL_UPDATE_PROMOTION:${stageVariables.ENVIRONMENT}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws"
        }
      }
    },
    "/customer/{customerId}/energyAccounts": {
      "get": {
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "customerID",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "206": {
            "description": "206 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "https://${stageVariables.BASE_URL}:${stageVariables.PORT}/${stageVariables.PATH}/getEnergyAccountDetails",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "requestParameters": {
            "integration.request.querystring.customerID": "method.request.path.customerId",
            "integration.request.path.customerId": "method.request.path.customerId"
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "GET",
          "type": "http"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "404": {
            "description": "404 response"
          },
          "500": {
            "description": "500 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:472828582453:function:CUS_CCDP_ApiQueueEnqueue:${stageVariables.ENVIRONMENT}/invocations",
          "responses": {
            ".*\\\"httpStatusCode\\\":400.*": {
              "statusCode": "400",
              "responseTemplates": {
                "application/json": "#set($message = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  #foreach($key in $message.data.keySet())\r\n  \"$key\": \"$message.data.get($key)\"#if($foreach.hasNext),#end\r\n  \r\n  #end\r\n}\r\n"
              }
            },
            "default": {
              "statusCode": "200",
              "responseTemplates": {
                "application/json": "$input.json('$.data')"
              }
            },
            ".*\\\"httpStatusCode\\\":500.*": {
              "statusCode": "500",
              "responseTemplates": {
                "application/json": "#set($message = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  #foreach($key in $message.data.keySet())\r\n  \"$key\": \"$message.data.get($key)\"#if($foreach.hasNext),#end\r\n  \r\n  #end\r\n}\r\n"
              }
            },
            ".*\\\"httpStatusCode\\\":404.*": {
              "statusCode": "404",
              "responseTemplates": {
                "application/json": "#set($message = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  #foreach($key in $message.data.keySet())\r\n  \"$key\": \"$message.data.get($key)\"#if($foreach.hasNext),#end\r\n  \r\n  #end\r\n}\r\n"
              }
            }
          },
          "passthroughBehavior": "when_no_templates",
          "httpMethod": "POST",
          "requestTemplates": {
            "application/json": "{\r\n  \"transactionId\":\"$context.requestId\",\r\n  \"url\": {\r\n    \"base\": \"$stageVariables.BOOMI_URL\",\r\n    \"endpoint\": \"$stageVariables.BOOMI_API_CONTRACT_ONLINE_BPCA\",\r\n\t\"method\" : \"$context.httpMethod\"\r\n  },\r\n  \"payload\":  $input.json('$')\r\n  \r\n}"
          },
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws"
        }
      }
    },
    "/customer/{customerId}/energyAccounts/bankDetails": {
      "put": {
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "https://${stageVariables.BASE_URL}:${stageVariables.PORT}/${stageVariables.PATH}/updateBankDetails",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "requestParameters": {
            "integration.request.path.customerId": "method.request.path.customerId"
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "PUT",
          "type": "http"
        }
      }
    },
    "/customer/{customerId}/energyAccounts/billingInfo": {
      "get": {
        "parameters": [
          {
            "name": "smeConsumptionInfo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paymentInfo.dfflag",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "smeConsumptionInfo.pricesDetails",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resiConsumptionInfo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "balanceInfo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paymentInfo.adcustdtlflag",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "smeConsumptionInfo.consumDetails",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "keyDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accounts",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "smeConsumptionInfo.noticeGiven",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "smeConsumptionInfo.contractDetails",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paymentInfo.midata",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "smeConsumptionInfo.accountDetails",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paymentInfo",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "https://${stageVariables.BASE_URL}:${stageVariables.PORT}/${stageVariables.PATH}/getBillingInfo",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "requestParameters": {
            "integration.request.querystring.customerID": "method.request.path.customerId",
            "integration.request.querystring.keyDate": "method.request.querystring.keyDate",
            "integration.request.querystring.resiConsumptionInfo": "method.request.querystring.resiConsumptionInfo",
            "integration.request.querystring.smeConsumptionInfo.consumDetails": "method.request.querystring.smeConsumptionInfo.consumDetails",
            "integration.request.querystring.paymentInfo.midata": "method.request.querystring.paymentInfo.midata",
            "integration.request.querystring.accounts": "method.request.querystring.accounts",
            "integration.request.querystring.paymentInfo": "method.request.querystring.paymentInfo",
            "integration.request.querystring.smeConsumptionInfo.noticeGiven": "method.request.querystring.smeConsumptionInfo.noticeGiven",
            "integration.request.querystring.paymentInfo.dfflag": "method.request.querystring.paymentInfo.dfflag",
            "integration.request.querystring.smeConsumptionInfo.pricesDetails": "method.request.querystring.smeConsumptionInfo.pricesDetails",
            "integration.request.path.customerId": "method.request.path.customerId",
            "integration.request.querystring.paymentInfo.adcustdtlflag": "method.request.querystring.paymentInfo.adcustdtlflag",
            "integration.request.querystring.balanceInfo": "method.request.querystring.balanceInfo",
            "integration.request.querystring.smeConsumptionInfo.accountDetails": "method.request.querystring.smeConsumptionInfo.accountDetails",
            "integration.request.querystring.smeConsumptionInfo.contractDetails": "method.request.querystring.smeConsumptionInfo.contractDetails",
            "integration.request.querystring.smeConsumptionInfo": "method.request.querystring.smeConsumptionInfo"
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "GET",
          "type": "http"
        }
      }
    },
    "/customer/{customerId}/energyAccounts/contract": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "404": {
            "description": "404 response"
          },
          "500": {
            "description": "500 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:472828582453:function:CUS_CCDP_ApiQueueEnqueue:${stageVariables.ENVIRONMENT}/invocations",
          "responses": {
            ".*\\\"httpStatusCode\\\":400.*": {
              "statusCode": "400",
              "responseTemplates": {
                "application/json": "\r\n#set($message = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  #foreach($key in $message.data.keySet())\r\n  \"$key\": \"$message.data.get($key)\"#if($foreach.hasNext),#end\r\n  \r\n  #end\r\n}\r\n"
              }
            },
            "default": {
              "statusCode": "200",
              "responseTemplates": {
                "application/json": "$input.json('$.data') "
              }
            },
            ".*\\\"httpStatusCode\\\":500.*": {
              "statusCode": "500",
              "responseTemplates": {
                "application/json": "\r\n#set($message = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  #foreach($key in $message.data.keySet())\r\n  \"$key\": \"$message.data.get($key)\"#if($foreach.hasNext),#end\r\n  \r\n  #end\r\n}\r\n"
              }
            },
            ".*\\\"httpStatusCode\\\":404.*": {
              "statusCode": "404",
              "responseTemplates": {
                "application/json": "\r\n#set($message = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  #foreach($key in $message.data.keySet())\r\n  \"$key\": \"$message.data.get($key)\"#if($foreach.hasNext),#end\r\n  \r\n  #end\r\n}\r\n"
              }
            }
          },
          "passthroughBehavior": "when_no_templates",
          "httpMethod": "POST",
          "requestTemplates": {
            "application/json": "{\r\n  \"transactionId\":\"$context.requestId\",\r\n  \"url\": {\r\n    \"base\": \"$stageVariables.BOOMI_URL\",\r\n    \"endpoint\": \"$stageVariables.BOOMI_API_CONTRACT\",\r\n\t\"method\" : \"$context.httpMethod\"\r\n  },\r\n  \"payload\":  $input.json('$')\r\n  \r\n} "
          },
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws"
        }
      }
    },
    "/customer/{customerId}/energyAccounts/meterDetails": {
      "get": {
        "parameters": [
          {
            "name": "mrdetails.eipReads",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "omrdetails",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mrdetails",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accounts",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "https://${stageVariables.BASE_URL}:${stageVariables.PORT}/${stageVariables.PATH}/getMeterDetails",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "requestParameters": {
            "integration.request.querystring.customerID": "method.request.path.customerId",
            "integration.request.querystring.mrdetails": "method.request.querystring.mrdetails",
            "integration.request.querystring.mrdetails.eipReads": "method.request.querystring.mrdetails.eipReads",
            "integration.request.querystring.accounts": "method.request.querystring.accounts",
            "integration.request.path.customerId": "method.request.path.customerId",
            "integration.request.querystring.omrdetails": "method.request.querystring.omrdetails"
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "GET",
          "type": "http"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "404": {
            "description": "404 response"
          },
          "500": {
            "description": "500 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:472828582453:function:CUS_CCDP_ApiQueueEnqueue:${stageVariables.ENVIRONMENT}/invocations",
          "responses": {
            ".*\\\"httpStatusCode\\\":400.*": {
              "statusCode": "400",
              "responseTemplates": {
                "application/json": "#set($message = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  #foreach($key in $message.data.keySet())\r\n  \"$key\": \"$message.data.get($key)\"#if($foreach.hasNext),#end\r\n  \r\n  #end\r\n}"
              }
            },
            "default": {
              "statusCode": "200",
              "responseTemplates": {
                "application/json": "$input.json('$.data') "
              }
            },
            ".*\\\"httpStatusCode\\\":500.*": {
              "statusCode": "500",
              "responseTemplates": {
                "application/json": "#set($message = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  #foreach($key in $message.data.keySet())\r\n  \"$key\": \"$message.data.get($key)\"#if($foreach.hasNext),#end\r\n  \r\n  #end\r\n}"
              }
            },
            ".*\\\"httpStatusCode\\\":404.*": {
              "statusCode": "404",
              "responseTemplates": {
                "application/json": "#set($message = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  #foreach($key in $message.data.keySet())\r\n  \"$key\": \"$message.data.get($key)\"#if($foreach.hasNext),#end\r\n  \r\n  #end\r\n}"
              }
            }
          },
          "passthroughBehavior": "when_no_templates",
          "httpMethod": "POST",
          "requestTemplates": {
            "application/json": "{\r\n  \"transactionId\":\"$context.requestId\",\r\n  \"url\": {\r\n    \"base\": \"$stageVariables.BOOMI_URL\",\r\n    \"endpoint\": \"$stageVariables.BOOMI_API_METER_DETAILS\",\r\n\t\"method\" : \"$context.httpMethod\"\r\n  },\r\n  \"payload\":  $input.json('$')\r\n  \r\n}"
          },
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws"
        }
      },
      "put": {
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "https://${stageVariables.BASE_URL}:${stageVariables.PORT}/${stageVariables.PATH}/updateReverseMROdeletion_MR",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "requestParameters": {
            "integration.request.path.customerId": "method.request.path.customerId"
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "PUT",
          "type": "http"
        }
      }
    },
    "/customer/{customerId}/energyAccounts/paymentPlan": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "404": {
            "description": "404 response"
          },
          "500": {
            "description": "500 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:472828582453:function:CUS_CCDP_ApiQueueEnqueue:${stageVariables.ENVIRONMENT}/invocations",
          "responses": {
            ".*\\\"httpStatusCode\\\":400.*": {
              "statusCode": "400",
              "responseTemplates": {
                "application/json": "#set($message = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  #foreach($key in $message.data.keySet())\r\n  \"$key\": \"$message.data.get($key)\"#if($foreach.hasNext),#end\r\n  \r\n  #end\r\n}\r\n"
              }
            },
            "default": {
              "statusCode": "200",
              "responseTemplates": {
                "application/json": "$input.json('$.data') "
              }
            },
            ".*\\\"httpStatusCode\\\":500.*": {
              "statusCode": "500",
              "responseTemplates": {
                "application/json": "#set($message = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  #foreach($key in $message.data.keySet())\r\n  \"$key\": \"$message.data.get($key)\"#if($foreach.hasNext),#end\r\n  \r\n  #end\r\n}\r\n"
              }
            },
            ".*\\\"httpStatusCode\\\":404.*": {
              "statusCode": "404",
              "responseTemplates": {
                "application/json": "#set($message = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  #foreach($key in $message.data.keySet())\r\n  \"$key\": \"$message.data.get($key)\"#if($foreach.hasNext),#end\r\n  \r\n  #end\r\n}\r\n"
              }
            }
          },
          "passthroughBehavior": "when_no_templates",
          "httpMethod": "POST",
          "requestTemplates": {
            "application/json": "{\r\n  \"transactionId\":\"$context.requestId\",\r\n  \"url\": {\r\n    \"base\": \"$stageVariables.BOOMI_URL\",\r\n    \"endpoint\": \"$stageVariables.BOOMI_API_PAYMENT_PLAN\",\r\n\t\"method\" : \"$context.httpMethod\"\r\n  },\r\n  \"payload\":  $input.json('$')\r\n  \r\n}"
          },
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws"
        }
      }
    },
    "/customer/{customerId}/energyAccounts/premise": {
      "get": {
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "customerID",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "206": {
            "description": "206 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "https://${stageVariables.BASE_URL}:${stageVariables.PORT}/${stageVariables.PATH}/getEnergyAccountDetails?isPremise=true",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "requestParameters": {
            "integration.request.querystring.customerID": "method.request.path.customerId",
            "integration.request.path.customerId": "method.request.path.customerId"
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "GET",
          "type": "http"
        }
      }
    },
    "/customer/{customerId}/energyAccounts/readOrder": {
      "delete": {
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "https://${stageVariables.BASE_URL}:${stageVariables.PORT}/${stageVariables.PATH}/deleteReadOrder",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "requestParameters": {
            "integration.request.path.customerId": "method.request.path.customerId"
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "DELETE",
          "type": "http"
        }
      }
    },
    "/customer/{customerId}/energyAccounts/{account1-account2-account3}": {
      "get": {
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "account1-account2-account3",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "customerID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spcid",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "206": {
            "description": "206 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "https://${stageVariables.BASE_URL}:${stageVariables.PORT}/${stageVariables.PATH}/getEnergyAccountDetails",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "requestParameters": {
            "integration.request.querystring.customerID": "method.request.path.customerId",
            "integration.request.path.account1-account2-account3": "method.request.path.account1-account2-account3",
            "integration.request.querystring.spcid": "method.request.querystring.spcid",
            "integration.request.path.customerId": "method.request.path.customerId",
            "integration.request.querystring.account": "method.request.path.account1-account2-account3"
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "GET",
          "type": "http"
        }
      }
    },
    "/customer/{customerId}/energyAccounts/{account1-account2-account3}/billingInfo/installmentPlans": {
      "get": {
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "account1-account2-account3",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "206": {
            "description": "206 response"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "https://${stageVariables.BASE_URL}:${stageVariables.PORT}/${stageVariables.PATH}/getEnergyAccountDetails?hasIPDetails=true",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "requestParameters": {
            "integration.request.querystring.customerID": "method.request.path.customerId",
            "integration.request.path.account1-account2-account3": "method.request.path.account1-account2-account3",
            "integration.request.path.customerId": "method.request.path.customerId",
            "integration.request.querystring.account": "method.request.path.account1-account2-account3"
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "GET",
          "type": "http"
        }
      }
    },
    "/customer/{customerId}/energyAccounts/{account1-account2-account3}/payment/bankDetails": {
      "get": {
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "account1-account2-account3",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "206": {
            "description": "206 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "https://${stageVariables.BASE_URL}:${stageVariables.PORT}/${stageVariables.PATH}/getEnergyAccountDetails?hasBankDetails=true",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "requestParameters": {
            "integration.request.querystring.customerID": "method.request.path.customerId",
            "integration.request.path.account1-account2-account3": "method.request.path.account1-account2-account3",
            "integration.request.path.customerId": "method.request.path.customerId",
            "integration.request.querystring.account": "method.request.path.account1-account2-account3"
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "GET",
          "type": "http"
        }
      }
    },
    "/customer/{customerId}/energyAccounts/{account1-account2-account3}/payment/{fromDate-toDate}/interactionHistory": {
      "get": {
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fromDate-toDate",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "account1-account2-account3",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "206": {
            "description": "206 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "https://${stageVariables.BASE_URL}:${stageVariables.PORT}/${stageVariables.PATH}/getAccountActivity?isBillingHistory=true&isMessageHistory=true",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "requestParameters": {
            "integration.request.path.fromDate-toDate": "method.request.path.fromDate-toDate",
            "integration.request.querystring.customerID": "method.request.path.customerId",
            "integration.request.path.account1-account2-account3": "method.request.path.account1-account2-account3",
            "integration.request.querystring.accounts": "method.request.path.account1-account2-account3",
            "integration.request.path.customerId": "method.request.path.customerId",
            "integration.request.querystring.dates": "method.request.path.fromDate-toDate"
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "GET",
          "type": "http"
        }
      }
    },
    "/customer/{customerId}/energyAccounts/{account1-account2-account3}/payment/{fromDate-toDate}/statements": {
      "get": {
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fromDate-toDate",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "account1-account2-account3",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "206": {
            "description": "206 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "https://${stageVariables.BASE_URL}:${stageVariables.PORT}/${stageVariables.PATH}/getAccountActivity?isBillingHistory=true",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "requestParameters": {
            "integration.request.path.fromDate-toDate": "method.request.path.fromDate-toDate",
            "integration.request.querystring.customerID": "method.request.path.customerId",
            "integration.request.path.account1-account2-account3": "method.request.path.account1-account2-account3",
            "integration.request.querystring.accounts": "method.request.path.account1-account2-account3",
            "integration.request.path.customerId": "method.request.path.customerId",
            "integration.request.querystring.dates": "method.request.path.fromDate-toDate"
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "GET",
          "type": "http"
        }
      }
    },
    "/customer/{customerId}/interactions/messages/{messageId}": {
      "get": {
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "206": {
            "description": "206 response"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "https://${stageVariables.BASE_URL}:${stageVariables.PORT}/${stageVariables.PATH}/getAccountActivity?isMessageHistory=true",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "requestParameters": {
            "integration.request.querystring.customerID": "method.request.path.customerId",
            "integration.request.querystring.correspondenceID": "method.request.path.messageId",
            "integration.request.path.customerId": "method.request.path.customerId",
            "integration.request.path.messageId": "method.request.path.messageId"
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "GET",
          "type": "http"
        }
      }
    },
    "/customer/{customerId}/userInfo": {
      "put": {
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          }
        },
        "security": [
          {
            "CustomAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "https://${stageVariables.BASE_URL}:${stageVariables.PORT}/${stageVariables.PATH}/updateUserInfo",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "requestParameters": {
            "integration.request.path.customerId": "method.request.path.customerId"
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "PUT",
          "type": "http"
        }
      }
    },
    "/domains": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "createDomainRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createDomainRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/createDomainResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "ConsumerAPIAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "type": "mock"
        }
      }
    },
    "/domains/domain/{domainType}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/readAllDomainTypeResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "ConsumerAPIAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "type": "mock"
        }
      }
    },
    "/domains/{domainIdentifier}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/readDomainResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "ConsumerAPIAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "type": "mock"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "updateDomainRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateDomainRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/updateDomainResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "ConsumerAPIAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "type": "mock"
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "deleteDomainRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deleteDomainRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/deleteDomainResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "ConsumerAPIAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "type": "mock"
        }
      }
    },
    "/legacy/replicate/interactionRecords": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "createInteractionRecordRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createInteractionRecordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/createInteractionRecordResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:472828582453:function:CUS_CIR_Create:${stageVariables.ENVIRONMENT}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws"
        }
      }
    },
    "/legacy/replicate/interactionRecords/{sourceActivityIdentifier}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sourceActivityIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "updateInteractionRecordRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateInteractionRecordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/updateInteractionRecordResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:472828582453:function:CUS_CIR_Update:${stageVariables.ENVIRONMENT}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_templates",
          "httpMethod": "POST",
          "requestTemplates": {
            "application/json": "{\r\n    \"sourceActivityIdentifier\" : \"$input.params('sourceActivityIdentifier')\",\r\n    \"body\" : $input.json('$') \r\n}"
          },
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws"
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sourceActivityIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "deleteInteractionRecordRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deleteInteractionRecordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/deleteInteractionRecordResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:472828582453:function:CUS_CIR_Delete:${stageVariables.ENVIRONMENT}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_templates",
          "httpMethod": "POST",
          "requestTemplates": {
            "application/json": "{    \r\n    \"sourceActivityIdentifier\": \"$input.params('sourceActivityIdentifier')\",\r\n\t\"sourceUpdatedBy\" : $input.json('$.sourceUpdatedBy'),\r\n\t\"sourceUpdatedDateTime\" : $input.json('$.sourceUpdatedDateTime')\r\n}\r\n"
          },
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws"
        }
      }
    },
    "/taskCategory": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "createTaskCategoryRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createTaskCategoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/createTaskCategoryResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "ConsumerAPIAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "type": "mock"
        }
      }
    },
    "/taskCategory/childCategories/{parentCategoryIdentifier}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentCategoryIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/readParentTaskCategoryResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "ConsumerAPIAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "type": "mock"
        }
      }
    },
    "/taskCategory/{taskCategoryIdentifier}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "taskCategoryIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/readTaskCategoryResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "ConsumerAPIAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "type": "mock"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "taskCategoryIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "updateTaskCategoryRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateTaskCategoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/updateTaskCategoryResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "ConsumerAPIAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "type": "mock"
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "taskCategoryIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "deleteTaskCategoryRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deleteTaskCategoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/deleteTaskCategoryResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "ConsumerAPIAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "type": "mock"
        }
      }
    },
    "/tasks": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "createTaskRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/createTaskResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "ConsumerAPIAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:472828582453:function:CUS_TASK_Create:${stageVariables.ENVIRONMENT}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws"
        }
      }
    },
    "/tasks/{taskIdentifier}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "taskIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "updateTaskRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/updateTaskResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "ConsumerAPIAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:472828582453:function:CUS_TASK_Update:${stageVariables.ENVIRONMENT}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_templates",
          "httpMethod": "POST",
          "requestTemplates": {
            "application/json": "{\r\n    \"taskIdentifier\" : $input.params('taskIdentifier'),\r\n    \"body\" : $input.json('$') \r\n}"
          },
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws"
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "taskIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "deleteTaskRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deleteTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/deleteTaskResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "ConsumerAPIAuthorizer": []
          },
          {
            "api_key": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:472828582453:function:CUS_TASK_Delete:${stageVariables.ENVIRONMENT}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_templates",
          "httpMethod": "POST",
          "requestTemplates": {
            "application/json": "{    \r\n  \"taskIdentifier\": $input.params('taskIdentifier'),\r\n \"updatedBy\" : $input.json('$.updatedBy')\r\n}"
          },
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws"
        }
      }
    }
  },
  "securityDefinitions": {
    "CustomAuthorizer": {
      "type": "apiKey",
      "name": "authorizationToken",
      "in": "header",
      "x-amazon-apigateway-authtype": "custom",
      "x-amazon-apigateway-authorizer": {
        "authorizerUri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:472828582453:function:CUS_CCDP_CustomAuth:prd/invocations",
        "authorizerResultTtlInSeconds": 1800,
        "type": "token"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "x-api-key",
      "in": "header"
    },
    "ConsumerAPIAuthorizer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "x-amazon-apigateway-authtype": "cognito_user_pools",
      "x-amazon-apigateway-authorizer": {
        "providerARNs": [
          "arn:aws:cognito-idp:eu-west-1:472828582453:userpool/eu-west-1_CxsJd0Lrp"
        ],
        "type": "cognito_user_pools"
      }
    }
  },
  "definitions": {
    "createTaskResponse": {
      "type": "object",
      "required": [
        "outcome",
        "status"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "description": "Outcome message based on success/failure"
        },
        "status": {
          "type": "integer",
          "description": "Status code- 200 for success, 4xx, 5xx for other errors"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code i.e sql error or validation error"
        },
        "errorMessage": {
          "type": "string",
          "description": "Outcome message based based on sql error or validation error"
        },
        "taskIdentifier": {
          "type": "integer",
          "description": "Task number generated in CIR"
        }
      }
    },
    "deleteContactRequest": {
      "type": "object",
      "required": [
        "updatedBy"
      ],
      "properties": {
        "updatedBy": {
          "type": "string",
          "description": "person/ system deleting the contact"
        }
      }
    },
    "contact": {
      "type": "object",
      "required": [
        "contactPartyIdentifier"
      ],
      "properties": {
        "contactPartyIdentifier": {
          "type": "string",
          "description": "Business Partner number"
        },
        "contactDirectionCode": {
          "type": "string",
          "description": "Direction of the contact, whether it was inbound or outbound or no entry"
        },
        "contactChannelCode": {
          "type": "string",
          "description": "Captures the area that handled the interaction"
        },
        "contactParam1": {
          "type": "string",
          "description": "Additional Field 1 for contact in future"
        },
        "contactParam2": {
          "type": "string",
          "description": "Additional Field 2 for contact in future"
        },
        "task": {
          "$ref": "#/definitions/task"
        },
        "case": {
          "$ref": "#/definitions/case"
        }
      }
    },
    "readTaskCategoryResponse": {
      "type": "object",
      "properties": {
        "taskCategory": {
          "$ref": "#/definitions/readTaskCategory"
        }
      }
    },
    "createContact": {
      "type": "object",
      "required": [
        "contactPartyIdentifier",
        "createdBy"
      ],
      "properties": {
        "contactPartyIdentifier": {
          "type": "string",
          "description": "Business partner number"
        },
        "contactDirectionCode": {
          "type": "string",
          "description": "Direction of the contact: inbound/ outbound etc"
        },
        "contactChannelCode": {
          "type": "string",
          "description": "Channel through which the contact was initiated"
        },
        "taskIdentifier": {
          "type": "integer",
          "description": "Task identifier to whom the contact will be linked"
        },
        "createdBy": {
          "type": "string",
          "description": "Lan ID, system, email id of person creating contact"
        },
        "updatedBy": {
          "type": "string",
          "description": "Lan ID, system, email id of person updating contact"
        },
        "case": {
          "$ref": "#/definitions/sourceCase"
        }
      }
    },
    "updateContact": {
      "type": "object",
      "required": [
        "updatedBy"
      ],
      "properties": {
        "contactPartyIdentifier": {
          "type": "string",
          "description": "Business partner number"
        },
        "contactDirectionCode": {
          "type": "string",
          "description": "Direction of the contact: inbound/ outbound etc"
        },
        "contactChannelCode": {
          "type": "string",
          "description": "Channel through which the contact was initiated"
        },
        "taskIdentifier": {
          "type": "integer",
          "description": "Task identifier to whom the contact will be linked"
        },
        "createdBy": {
          "type": "string",
          "description": "Lan ID, system, email id of person creating contact"
        },
        "updatedBy": {
          "type": "string",
          "description": "Lan ID, system, email id of person updating contact"
        },
        "case": {
          "$ref": "#/definitions/sourceCase"
        }
      }
    },
    "case": {
      "type": "object",
      "properties": {
        "isCaseLinked": {
          "type": "boolean",
          "description": "indicates CRM complaint raised"
        },
        "caseParam1": {
          "type": "string",
          "description": "Additional Field 1 for case in future"
        },
        "caseParam2": {
          "type": "string",
          "description": "Additional Field 1 for case in future"
        }
      }
    },
    "updateIRTask": {
      "type": "object",
      "properties": {
        "taskPartyIdentifier": {
          "type": "string",
          "description": "Business Partner number"
        },
        "taskAccountIdentifier": {
          "type": "string",
          "description": "Contract Account number"
        },
        "taskPriorityCode": {
          "type": "string",
          "description": "Describes the priority applied to the task record"
        },
        "taskStatusCode": {
          "type": "string",
          "description": "Captures status of task"
        },
        "taskCategoryCode": {
          "type": "string",
          "description": "Describes task type and type of work completed"
        },
        "taskSubCategoryCode": {
          "type": "string",
          "description": "Further categorisation of type of work completed"
        },
        "taskDescription": {
          "type": "string",
          "description": "Description of task"
        },
        "taskNotes": {
          "type": "string",
          "description": "Describes the task undertaken"
        },
        "taskTargetCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Captures the target completion date of task"
        },
        "taskAssignedTo": {
          "type": "string",
          "description": "Lan ID/Department to whom the Task will be assigned"
        },
        "taskParam1": {
          "type": "string",
          "description": "Additional Field 1 for task in future"
        },
        "taskParam2": {
          "type": "string",
          "description": "Additional Field 2 for task in future"
        }
      }
    },
    "createTaskCategoryRequest": {
      "type": "object",
      "properties": {
        "taskCategory": {
          "$ref": "#/definitions/createTaskCategory"
        }
      }
    },
    "readContactsRequest": {
      "type": "object",
      "properties": {
        "partyIdentifier": {
          "type": "string",
          "description": "business partner number"
        },
        "fromDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date range start date to fetch details"
        },
        "toDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date range end date to fetch details"
        }
      }
    },
    "updateInteractionRecordResponse": {
      "type": "object",
      "required": [
        "outcome",
        "status"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "description": "Outcome message based on success/failure"
        },
        "status": {
          "type": "integer",
          "description": "Status code- 200 for success, 4xx, 5xx for other errors"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code i.e sql error or validation error"
        },
        "errorMessage": {
          "type": "string",
          "description": "Outcome message based based on sql error or validation error"
        },
        "sourceActivityIdentifier": {
          "type": "string",
          "description": "Interaction record Activity number generated in CRM"
        },
        "contactIdentifier": {
          "type": "integer",
          "description": "Contact Identifier generated on AWS Database"
        },
        "taskIdentifier": {
          "type": "integer",
          "description": "Task Identifier generated on AWS Database"
        },
        "caseIdentifier": {
          "type": "integer",
          "description": "Case Identifier generated on AWS Database"
        }
      }
    },
    "createContactResponse": {
      "type": "object",
      "required": [
        "contact",
        "outcome",
        "status"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "description": "Outcome message based on success/failure"
        },
        "status": {
          "type": "integer",
          "description": "Status code- 200 for success, 4xx, 5xx for other errors"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code i.e sql error or validation error"
        },
        "errorMessage": {
          "type": "string",
          "description": "Outcome message based based on sql error or validation error"
        },
        "contact": {
          "type": "object",
          "properties": {
            "contactIdentifier": {
              "type": "integer",
              "description": "new contact number generated"
            },
            "case": {
              "$ref": "#/definitions/caseid"
            }
          },
          "required": [
            "contactIdentifier"
          ]
        }
      }
    },
    "deleteInteractionRecordRequest": {
      "type": "object",
      "required": [
        "sourceUpdatedBy",
        "sourceUpdatedDateTime"
      ],
      "properties": {
        "sourceUpdatedBy": {
          "type": "string",
          "description": "Lan ID, system"
        },
        "sourceUpdatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of update"
        }
      }
    },
    "updateTaskResponse": {
      "type": "object",
      "required": [
        "outcome",
        "status"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "description": "Outcome message based on success/failure"
        },
        "status": {
          "type": "integer",
          "description": "Status code- 200 for success, 4xx, 5xx for other errors"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code i.e sql error or validation error"
        },
        "errorMessage": {
          "type": "string",
          "description": "Outcome message based based on sql error or validation error"
        },
        "taskIdentifier": {
          "type": "integer",
          "description": "task number that got updated"
        }
      }
    },
    "updateTaskRequest": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/updateTask"
        }
      }
    },
    "updateTaskCategoryResponse": {
      "type": "object",
      "required": [
        "outcome",
        "status"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "description": "Outcome message based on success/failure"
        },
        "status": {
          "type": "integer",
          "description": "Status code- 200 for success, 4xx, 5xx for other errors"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code i.e sql error or validation error"
        },
        "errorMessage": {
          "type": "string",
          "description": "Outcome message based based on sql error or validation error"
        }
      }
    },
    "readAllDomainTypeResponse": {
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/readAllDomainType"
        }
      }
    },
    "deleteTaskRequest": {
      "type": "object",
      "required": [
        "updatedBy"
      ],
      "properties": {
        "updatedBy": {
          "type": "string",
          "description": "Person/ system deleting the task"
        }
      }
    },
    "updateTask": {
      "type": "object",
      "required": [
        "updatedBy"
      ],
      "properties": {
        "taskPartyIdentifier": {
          "type": "string",
          "description": "Business partner number"
        },
        "taskAccountIdentifier": {
          "type": "string",
          "description": "Contract account number"
        },
        "taskPriorityCode": {
          "type": "string",
          "description": "Priority of the task"
        },
        "taskStatusCode": {
          "type": "string",
          "description": "Status of the task"
        },
        "taskCategryIdentifier": {
          "type": "integer",
          "description": "Task category"
        },
        "taskDescription": {
          "type": "string",
          "description": "Task description"
        },
        "taskNotes": {
          "type": "string",
          "description": "Task notes"
        },
        "taskTargetCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Time of completion of task"
        },
        "taskAssignedTo": {
          "type": "string",
          "description": "Person/ department to whom the task is assigned"
        },
        "contactIdentifier": {
          "type": "integer",
          "description": "Contact identifier to whom the task will be linked"
        },
        "createdBy": {
          "type": "string",
          "description": "Lan ID, system, email id of person creating task"
        },
        "updatedBy": {
          "type": "string",
          "description": "Lan ID, system, email id of person updating task"
        }
      }
    },
    "task": {
      "type": "object",
      "required": [
        "taskPartyIdentifier"
      ],
      "properties": {
        "taskPartyIdentifier": {
          "type": "string",
          "description": "Business Partner number"
        },
        "taskAccountIdentifier": {
          "type": "string",
          "description": "Contract Account number"
        },
        "taskPriorityCode": {
          "type": "string",
          "description": "Describes the priority applied to the task record"
        },
        "taskStatusCode": {
          "type": "string",
          "description": "Captures status of task"
        },
        "taskCategoryCode": {
          "type": "string",
          "description": "Describes task type and type of work completed"
        },
        "taskSubCategoryCode": {
          "type": "string",
          "description": "Further categorisation of type of work completed"
        },
        "taskDescription": {
          "type": "string",
          "description": "Description of task"
        },
        "taskNotes": {
          "type": "string",
          "description": "Describes the task undertaken"
        },
        "taskTargetCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Captures the target completion date of task"
        },
        "taskAssignedTo": {
          "type": "string",
          "description": "Lan ID/Department to whom the Task will be assigned"
        },
        "taskParam1": {
          "type": "string",
          "description": "Additional Field 1 for task in future"
        },
        "taskParam2": {
          "type": "string",
          "description": "Additional Field 2 for task in future"
        }
      }
    },
    "readDomain": {
      "type": "object",
      "properties": {
        "domainCodeIdentifier": {
          "type": "string",
          "description": "Unique domain code identifier"
        },
        "domainDescription": {
          "type": "string",
          "description": "Domain description"
        },
        "domainType": {
          "type": "string",
          "description": "Domain type eg: communication channel, task status etc"
        },
        "visible": {
          "type": "integer",
          "description": "describes the visibility on front end"
        },
        "createdBy": {
          "type": "string",
          "description": "describes the person/ channel creating new domain code"
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date time when the domain code was created"
        },
        "updatedBy": {
          "type": "string",
          "description": "describes the person/ channel updating new domain code"
        },
        "updatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date time when the domain code was updated"
        }
      }
    },
    "caseid": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "caseIdentifier": {
            "type": "integer",
            "description": "Case identifier"
          }
        }
      }
    },
    "createTask": {
      "type": "object",
      "required": [
        "createdBy",
        "taskPartyIdentifier"
      ],
      "properties": {
        "taskPartyIdentifier": {
          "type": "string",
          "description": "Business partner number"
        },
        "taskAccountIdentifier": {
          "type": "string",
          "description": "Contract account number"
        },
        "taskPriorityCode": {
          "type": "string",
          "description": "Priority of the task"
        },
        "taskStatusCode": {
          "type": "string",
          "description": "Status of the task"
        },
        "taskCategryIdentifier": {
          "type": "integer",
          "description": "Task category"
        },
        "taskDescription": {
          "type": "string",
          "description": "Task description"
        },
        "taskNotes": {
          "type": "string",
          "description": "Task notes"
        },
        "taskTargetCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Time of completion of task"
        },
        "taskAssignedTo": {
          "type": "string",
          "description": "Person/ department to whom the task is assigned"
        },
        "contactIdentifier": {
          "type": "integer",
          "description": "Contact identifier to whom the task will be linked"
        },
        "createdBy": {
          "type": "string",
          "description": "Lan ID, system, email id of person creating task"
        },
        "updatedBy": {
          "type": "string",
          "description": "Lan ID, system, email id of person updating task"
        }
      }
    },
    "deleteTaskCategoryRequest": {
      "type": "object",
      "required": [
        "updatedBy"
      ],
      "properties": {
        "updatedBy": {
          "type": "string",
          "description": "describes the person/ channel deleting the task category"
        }
      }
    },
    "getContactTasks": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "taskIdentifier": {
            "type": "integer",
            "description": "Unique task identifier"
          },
          "parentTaskIdentifier": {
            "type": "integer",
            "description": "parent task identifier"
          },
          "taskPartyIdentifier": {
            "type": "string",
            "description": "Business partner number"
          },
          "taskAccountIdentifier": {
            "type": "string",
            "description": "Contract account number"
          },
          "taskDescription": {
            "type": "string",
            "description": "Task description"
          },
          "taskCategoryIdentifier": {
            "type": "integer",
            "description": "Task category"
          },
          "taskCategoryDescription": {
            "type": "string",
            "description": "Task category description"
          },
          "taskPriorityCode": {
            "type": "string",
            "description": "Priority code of the task"
          },
          "taskPriorityDescription": {
            "type": "string",
            "description": "Priority description of the task"
          },
          "taskStatusCode": {
            "type": "string",
            "description": "Status code of the task"
          },
          "taskStatusDescription": {
            "type": "string",
            "description": "Status description of the task"
          },
          "taskTargetCompletionDate": {
            "type": "string",
            "format": "date-time",
            "description": "Time of completion of task"
          },
          "taskAssignedTo": {
            "type": "string",
            "description": "Person/ department to whom the task is assigned"
          },
          "taskNotes": {
            "type": "string",
            "description": "Task notes"
          },
          "createdBy": {
            "type": "string",
            "description": "Lan ID, system, email id of person creating task"
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time of creation in target system"
          },
          "updatedBy": {
            "type": "string",
            "description": "Lan ID, system, email id of person updating task"
          },
          "updateddDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time of update in target system"
          },
          "sourceCreatedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time of creation in source system"
          },
          "sourceUpdatedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time of update in source system"
          }
        }
      }
    },
    "updateTaskCategory": {
      "type": "object",
      "required": [
        "updatedBy"
      ],
      "properties": {
        "parentCategoryIdentifier": {
          "type": "integer",
          "description": "parent task category identifier"
        },
        "categoryCodeIdentifier": {
          "type": "string",
          "description": "task category code identifier from source system"
        },
        "taskCategoryDescription": {
          "type": "string",
          "description": "task category description"
        },
        "visible": {
          "type": "integer",
          "description": "describes the visibility on front end"
        },
        "updatedBy": {
          "type": "string",
          "description": "describes the person/ channel updating the task category"
        }
      }
    },
    "readContactResponse": {
      "type": "object",
      "required": [
        "outcome",
        "status"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "description": "Outcome message based on success/failure"
        },
        "status": {
          "type": "integer",
          "description": "Status code- 200 for success, 4xx, 5xx for other errors"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code i.e sql error or validation error"
        },
        "errorMessage": {
          "type": "string",
          "description": "Outcome message based based on sql error or validation error"
        },
        "contact": {
          "$ref": "#/definitions/getPartyIdentfierContacts"
        }
      }
    },
    "updateDomainRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/updateDomain"
        }
      }
    },
    "updateTaskCategoryRequest": {
      "type": "object",
      "properties": {
        "taskCategory": {
          "$ref": "#/definitions/updateTaskCategory"
        }
      }
    },
    "deleteContactResponse": {
      "type": "object",
      "required": [
        "outcome",
        "status"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "description": "Outcome message based on success/failure"
        },
        "status": {
          "type": "integer",
          "description": "Status code- 200 for success, 4xx, 5xx for other errors"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code i.e sql error or validation error"
        },
        "errorMessage": {
          "type": "string",
          "description": "Outcome message based based on sql error or validation error"
        }
      }
    },
    "createDomain": {
      "type": "object",
      "required": [
        "createdBy",
        "domainCodeIdentifier",
        "domainDescription",
        "domainType"
      ],
      "properties": {
        "domainCodeIdentifier": {
          "type": "string",
          "description": "Unique domain identifier"
        },
        "domainDescription": {
          "type": "string",
          "description": "Domain description"
        },
        "domainType": {
          "type": "string",
          "description": "Domain type eg: communication channel, task status etc"
        },
        "visible": {
          "type": "integer",
          "description": "describes the visibility on front end"
        },
        "createdBy": {
          "type": "string",
          "description": "describes the person/ channel creating new domain code"
        }
      }
    },
    "updateContactRequest": {
      "type": "object",
      "properties": {
        "contact": {
          "$ref": "#/definitions/updateContact"
        }
      }
    },
    "readDomainResponse": {
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/readDomain"
        }
      }
    },
    "createInteractionRecordResponse": {
      "type": "object",
      "required": [
        "outcome",
        "status"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "description": "Outcome message based on success/failure"
        },
        "status": {
          "type": "integer",
          "description": "Status code- 200 for success, 4xx, 5xx for other errors"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code i.e sql error or validation error"
        },
        "errorMessage": {
          "type": "string",
          "description": "Outcome message based based on sql error or validation error"
        },
        "sourceActivityIdentifier": {
          "type": "string",
          "description": "Interaction record Activity number generated in CRM"
        },
        "contactIdentifier": {
          "type": "integer",
          "description": "Contact Identifier generated on AWS Database"
        },
        "taskIdentifier": {
          "type": "integer",
          "description": "Task Identifier generated on AWS Database"
        },
        "caseIdentifier": {
          "type": "integer",
          "description": "Case Identifier generated on AWS Database"
        }
      }
    },
    "sourceCase": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "isCaseLinked": {
            "type": "boolean",
            "description": "To identify if the case needs to be creeate dor deleted"
          },
          "sourceCaseIdentifier": {
            "type": "string",
            "description": "Source case number"
          },
          "sourceCaseCreatedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time of case creation in source system"
          },
          "sourceCaseUpdatedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time of case update in source system"
          }
        }
      }
    },
    "createTaskRequest": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/createTask"
        }
      }
    },
    "deleteTaskResponse": {
      "type": "object",
      "required": [
        "outcome",
        "status"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "description": "Outcome message based on success/failure"
        },
        "status": {
          "type": "integer",
          "description": "Status code- 200 for success, 4xx, 5xx for other errors"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code i.e sql error or validation error"
        },
        "errorMessage": {
          "type": "string",
          "description": "Outcome message based based on sql error or validation error"
        }
      }
    },
    "createContactRequest": {
      "type": "object",
      "properties": {
        "contact": {
          "$ref": "#/definitions/createContact"
        }
      }
    },
    "deleteTaskCategoryResponse": {
      "type": "object",
      "required": [
        "outcome",
        "status"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "description": "Outcome message based on success/failure"
        },
        "status": {
          "type": "integer",
          "description": "Status code- 200 for success, 4xx, 5xx for other errors"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code i.e sql error or validation error"
        },
        "errorMessage": {
          "type": "string",
          "description": "Outcome message based based on sql error or validation error"
        }
      }
    },
    "deleteDomainRequest": {
      "type": "object",
      "required": [
        "updatedBy"
      ],
      "properties": {
        "updatedBy": {
          "type": "string",
          "description": "describes the person/ channel deleting new domain code"
        }
      }
    },
    "deleteInteractionRecordResponse": {
      "type": "object",
      "required": [
        "outcome",
        "status"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "description": "Outcome message based on success/failure"
        },
        "status": {
          "type": "integer",
          "description": "Status code- 200 for success, 4xx, 5xx for other errors"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code i.e sql error or validation error"
        },
        "errorMessage": {
          "type": "string",
          "description": "Outcome message based based on sql error or validation error"
        }
      }
    },
    "createDomainResponse": {
      "type": "object",
      "required": [
        "domainIdentifier",
        "outcome",
        "status"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "description": "Outcome message based on success/failure"
        },
        "status": {
          "type": "integer",
          "description": "Status code- 200 for success, 4xx, 5xx for other errors"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code i.e sql error or validation error"
        },
        "errorMessage": {
          "type": "string",
          "description": "Outcome message based based on sql error or validation error"
        },
        "domainIdentifier": {
          "type": "integer",
          "description": "The newly created domain identifier"
        }
      }
    },
    "createTaskCategory": {
      "type": "object",
      "required": [
        "categoryCodeIdentifier",
        "createdBy",
        "taskCategoryDescription"
      ],
      "properties": {
        "parentCategoryIdentifier": {
          "type": "integer",
          "description": "Unique category code identifier"
        },
        "categoryCodeIdentifier": {
          "type": "string",
          "description": "Unique category code identifier"
        },
        "taskCategoryDescription": {
          "type": "string",
          "description": "Task category description"
        },
        "visible": {
          "type": "integer",
          "description": "describes the visibility on front end"
        },
        "createdBy": {
          "type": "string",
          "description": "describes the person/ channel creating new tasl category"
        }
      }
    },
    "deleteBusinessPartnerContactsRequest": {
      "type": "object",
      "required": [
        "updatedBy"
      ],
      "properties": {
        "updatedBy": {
          "type": "string",
          "description": "person/ system deleting the business partner contacts"
        }
      }
    },
    "updateContactResponse": {
      "type": "object",
      "required": [
        "outcome",
        "status"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "description": "Outcome message based on success/failure"
        },
        "status": {
          "type": "integer",
          "description": "Status code- 200 for success, 4xx, 5xx for other errors"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code i.e sql error or validation error"
        },
        "errorMessage": {
          "type": "string",
          "description": "Outcome message based based on sql error or validation error"
        },
        "contact": {
          "type": "object",
          "properties": {
            "contactIdentifier": {
              "type": "integer",
              "description": "contact number that is updated"
            },
            "case": {
              "$ref": "#/definitions/caseid"
            }
          }
        }
      }
    },
    "updateDomainResponse": {
      "type": "object",
      "required": [
        "outcome",
        "status"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "description": "Outcome message based on success/failure"
        },
        "status": {
          "type": "integer",
          "description": "Status code- 200 for success, 4xx, 5xx for other errors"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code i.e sql error or validation error"
        },
        "errorMessage": {
          "type": "string",
          "description": "Outcome message based based on sql error or validation error"
        }
      }
    },
    "createInteractionRecordRequest": {
      "type": "object",
      "required": [
        "sourceActivityIdentifier",
        "sourceCreatedBy",
        "sourceCreatedDateTime"
      ],
      "properties": {
        "sourceActivityIdentifier": {
          "type": "string",
          "description": "Interaction record Activity number generated in CRM"
        },
        "sourceCreatedBy": {
          "type": "string",
          "description": "Lan ID, system "
        },
        "sourceCreatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of creation"
        },
        "sourceUpdatedBy": {
          "type": "string",
          "description": "Lan ID, system"
        },
        "sourceUpdatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of update"
        },
        "contact": {
          "$ref": "#/definitions/contact"
        }
      }
    },
    "readParentTaskCategory": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "taskCategoryIdentifier": {
            "type": "integer",
            "description": "Unique task category identifier"
          },
          "categoryCodeIdentifier": {
            "type": "string",
            "description": "Unique category code identifier as defined in source system"
          },
          "taskCategoryDescription": {
            "type": "string",
            "description": "Description of category"
          },
          "visible": {
            "type": "integer",
            "description": "describes the visibility on front end"
          },
          "createdBy": {
            "type": "string",
            "description": "describes the person/ channel creating task category"
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date time when the task category was created"
          },
          "updatedBy": {
            "type": "string",
            "description": "describes the person/ channel updating the task category"
          },
          "updatedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date time when the task category was updated"
          }
        }
      }
    },
    "updateIRContact": {
      "type": "object",
      "properties": {
        "contactPartyIdentifier": {
          "type": "string",
          "description": "Business Partner number"
        },
        "contactDirectionCode": {
          "type": "string",
          "description": "Direction of the contact, whether it was inbound or outbound or no entry"
        },
        "contactChannelCode": {
          "type": "string",
          "description": "Captures the area that handled the interaction"
        },
        "contactParam1": {
          "type": "string",
          "description": "Additional Field 1 for contact in future"
        },
        "contactParam2": {
          "type": "string",
          "description": "Additional Field 2 for contact in future"
        },
        "task": {
          "$ref": "#/definitions/updateIRTask"
        },
        "case": {
          "$ref": "#/definitions/case"
        }
      }
    },
    "getContactCases": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "caseIdentifier": {
            "type": "integer",
            "description": "Unique case identifier"
          },
          "sourceCaseIdentifier": {
            "type": "string",
            "description": "Unique source identifier"
          },
          "createdBy": {
            "type": "string",
            "description": "Lan ID, system, email id of person creating case"
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time of creation in target system"
          },
          "updatedBy": {
            "type": "string",
            "description": "Lan ID, system, email id of person updating case"
          },
          "updateddDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time of update in target system"
          },
          "sourceCreatedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time of creation in source system"
          },
          "sourceUpdatedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time of update in source system"
          }
        }
      }
    },
    "getPartyIdentfierContacts": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "contactIdentifier": {
            "type": "integer",
            "description": "Unique contact number"
          },
          "sourceActivityIdentifier": {
            "type": "string",
            "description": "Unique source activity identifier"
          },
          "partyIdentifier": {
            "type": "string",
            "description": "Business partner number"
          },
          "directionCode": {
            "type": "string",
            "description": "Direction code. Ex: N, I"
          },
          "directionDescription": {
            "type": "string",
            "description": "Direction description: No Entry, Inbound etc"
          },
          "channelCode": {
            "type": "string",
            "description": "Channel Code, ex: 301"
          },
          "channelDescription": {
            "type": "string",
            "description": "Channel Description. Ex: Letter"
          },
          "createdBy": {
            "type": "string",
            "description": "Lan ID, system, email id of person creating contact"
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date Time of creation in target system"
          },
          "updatedBy": {
            "type": "string",
            "description": "Lan ID, system, email id of person updating contact"
          },
          "updateddDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date Time of update in target system"
          },
          "sourceCreatedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date Time of creation in source system"
          },
          "sourceUpdatedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date Time of update in target system"
          },
          "task": {
            "$ref": "#/definitions/getContactTasks"
          },
          "case": {
            "$ref": "#/definitions/getContactCases"
          }
        }
      }
    },
    "deleteDomainResponse": {
      "type": "object",
      "required": [
        "outcome",
        "status"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "description": "Outcome message based on success/failure"
        },
        "status": {
          "type": "integer",
          "description": "Status code- 200 for success, 4xx, 5xx for other errors"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code i.e sql error or validation error"
        },
        "errorMessage": {
          "type": "string",
          "description": "Outcome message based based on sql error or validation error"
        }
      }
    },
    "updateInteractionRecordRequest": {
      "type": "object",
      "required": [
        "sourceUpdatedBy",
        "sourceUpdatedDateTime"
      ],
      "properties": {
        "sourceCreatedBy": {
          "type": "string",
          "description": "Lan ID, system "
        },
        "sourceCreatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of creation"
        },
        "sourceUpdatedBy": {
          "type": "string",
          "description": "Lan ID, system"
        },
        "sourceUpdatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of update"
        },
        "contact": {
          "$ref": "#/definitions/updateIRContact"
        }
      }
    },
    "createTaskCategoryResponse": {
      "type": "object",
      "required": [
        "outcome",
        "status"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "description": "Outcome message based on success/failure"
        },
        "status": {
          "type": "integer",
          "description": "Status code- 200 for success, 4xx, 5xx for other errors"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code i.e sql error or validation error"
        },
        "errorMessage": {
          "type": "string",
          "description": "Outcome message based based on sql error or validation error"
        },
        "taskCategoryIdentifier": {
          "type": "integer",
          "description": "Auto generated task category identifier"
        }
      }
    },
    "createDomainRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/createDomain"
        }
      }
    },
    "readTaskCategory": {
      "type": "object",
      "properties": {
        "taskCategoryIdentifier": {
          "type": "integer",
          "description": "Unique task category identifier"
        },
        "parentCategoryIdentifier": {
          "type": "integer",
          "description": "parent category identifier of task"
        },
        "categoryCodeIdentifier": {
          "type": "string",
          "description": "Unique category code identifier as defined in source system"
        },
        "taskCategoryDescription": {
          "type": "string",
          "description": "Description of category"
        },
        "visible": {
          "type": "integer",
          "description": "describes the visibility on front end"
        },
        "createdBy": {
          "type": "string",
          "description": "describes the person/ channel creating task category"
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date time when the task category was created"
        },
        "updatedBy": {
          "type": "string",
          "description": "describes the person/ channel updating the task category"
        },
        "updatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date time when the task category was updated"
        }
      }
    },
    "updateDomain": {
      "type": "object",
      "required": [
        "updatedBy"
      ],
      "properties": {
        "domainCodeIdentifier": {
          "type": "string",
          "description": "Domain code identifier"
        },
        "domainDescription": {
          "type": "string",
          "description": "Domain description"
        },
        "domainType": {
          "type": "string",
          "description": "Domain type eg: communication channel, task status etc"
        },
        "visible": {
          "type": "integer",
          "description": "describes the visibility on front end"
        },
        "updatedBy": {
          "type": "string",
          "description": "describes the person/ channel updating new domain code"
        }
      }
    },
    "readAllDomainType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "domainIdentifier": {
            "type": "string",
            "description": "Unique domain identifier"
          },
          "domainCodeIdentifier": {
            "type": "string",
            "description": "Domain code identifier"
          },
          "domainDescription": {
            "type": "string",
            "description": "Domain description"
          },
          "visible": {
            "type": "integer",
            "description": "describes the visibility on front end"
          },
          "createdBy": {
            "type": "string",
            "description": "describes the person/ channel creating new domain code"
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date time when the domain code was created"
          },
          "updatedBy": {
            "type": "string",
            "description": "describes the person/ channel updating new domain code"
          },
          "updatedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date time when the domain code was updated"
          }
        }
      }
    },
    "readParentTaskCategoryResponse": {
      "type": "object",
      "properties": {
        "taskCategory": {
          "$ref": "#/definitions/readParentTaskCategory"
        }
      }
    }
  }
}